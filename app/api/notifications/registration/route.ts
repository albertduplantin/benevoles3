import { NextRequest, NextResponse } from 'next/server';
import { sendMissionRegistrationEmailJS } from '@/lib/email/send-notifications-emailjs';
import { getUserByIdAdmin } from '@/lib/firebase/users-admin';
import { getMissionByIdAdmin } from '@/lib/firebase/missions-admin';

export async function POST(request: NextRequest) {
  try {
    const { volunteerId, missionId } = await request.json();

    console.log('========================================');
    console.log('üìß NOTIFICATION INSCRIPTION MISSION');
    console.log('========================================');
    console.log('üë§ Volunteer ID:', volunteerId);
    console.log('üéØ Mission ID:', missionId);

    if (!volunteerId || !missionId) {
      console.error('‚ùå Param√®tres manquants');
      return NextResponse.json(
        { error: 'volunteerId and missionId are required' },
        { status: 400 }
      );
    }

    // R√©cup√©rer les donn√©es du b√©n√©vole (c√¥t√© serveur avec Admin SDK)
    console.log('üîç R√©cup√©ration du b√©n√©vole...');
    const volunteer = await getUserByIdAdmin(volunteerId);
    if (!volunteer) {
      console.error('‚ùå B√©n√©vole non trouv√©');
      return NextResponse.json(
        { error: 'Volunteer not found' },
        { status: 404 }
      );
    }
    console.log('‚úÖ B√©n√©vole trouv√©:', volunteer.email);
    console.log('üìß Notifications email activ√©es:', volunteer.notificationPreferences?.email);
    console.log('üì¢ Communications activ√©es:', volunteer.consents.communications);

    // R√©cup√©rer les donn√©es de la mission (c√¥t√© serveur avec Admin SDK)
    console.log('üîç R√©cup√©ration de la mission...');
    const mission = await getMissionByIdAdmin(missionId);
    if (!mission) {
      console.error('‚ùå Mission non trouv√©e');
      return NextResponse.json(
        { error: 'Mission not found' },
        { status: 404 }
      );
    }
    console.log('‚úÖ Mission trouv√©e:', mission.title);

    // Envoyer l'email via EmailJS
    console.log('üì§ Tentative d\'envoi de l\'email via EmailJS...');
    const result = await sendMissionRegistrationEmailJS(volunteer, mission);

    if (!result.success) {
      console.error('‚ùå √âchec de l\'envoi:', result.error);
      return NextResponse.json(
        { error: result.error },
        { status: 500 }
      );
    }

    console.log('‚úÖ Email envoy√© avec succ√®s !');
    console.log('========================================');
    return NextResponse.json({ success: true });
  } catch (error: any) {
    console.error('‚ùå ERREUR CATCH:', error);
    console.error('Stack:', error.stack);
    console.log('========================================');
    return NextResponse.json(
      { error: error.message || 'Failed to send email' },
      { status: 500 }
    );
  }
}

