/**
 * Script pour cr√©er des missions de test pour le beta test
 * Usage: npx tsx scripts/create-test-missions.ts
 */

import { initializeApp } from 'firebase/app';
import { getFirestore, collection, addDoc, Timestamp } from 'firebase/firestore';

// Configuration Firebase (√† adapter avec vos credentials)
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// Missions de test
const testMissions = [
  {
    title: "Accueil du public - Soir√©e d'ouverture",
    description: "Accueillir les festivaliers √† l'entr√©e du th√©√¢tre, distribuer les programmes et orienter le public vers les diff√©rentes salles. Un sourire et une bonne connaissance du lieu sont vos meilleurs atouts !",
    type: 'scheduled' as const,
    startDate: new Date('2025-11-19T18:00:00'),
    endDate: new Date('2025-11-19T22:00:00'),
    location: 'Th√©√¢tre des Jacobins',
    maxVolunteers: 5,
    volunteers: [],
    responsibles: [],
    pendingResponsibles: [],
    status: 'published' as const,
    isUrgent: true,
    isRecurrent: false,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    title: "Gestion projection - Comp√©tition internationale",
    description: "Assurer le bon d√©roulement de la projection : accueil en salle, pr√©sentation du court-m√©trage, gestion des questions-r√©ponses avec le r√©alisateur. Id√©al pour les cin√©philes !",
    type: 'scheduled' as const,
    startDate: new Date('2025-11-20T14:00:00'),
    endDate: new Date('2025-11-20T17:00:00'),
    location: 'Cin√©ma Le Club',
    maxVolunteers: 3,
    volunteers: [],
    responsibles: [],
    pendingResponsibles: [],
    status: 'published' as const,
    isUrgent: false,
    isRecurrent: false,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    title: "Service bar - Soir√©e de cl√¥ture",
    description: "Servir les boissons au bar du festival pendant la soir√©e de cl√¥ture. Ambiance festive garantie ! Exp√©rience en service bienvenue mais pas obligatoire.",
    type: 'scheduled' as const,
    startDate: new Date('2025-11-23T20:00:00'),
    endDate: new Date('2025-11-24T00:00:00'),
    location: 'Bar du Festival - Salle des f√™tes',
    maxVolunteers: 8,
    volunteers: [],
    responsibles: [],
    pendingResponsibles: [],
    status: 'published' as const,
    isUrgent: false,
    isRecurrent: false,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    title: "Installation mat√©riel - Pr√©paration festival",
    description: "Aider √† l'installation du mat√©riel (sc√®ne, son, lumi√®res, signal√©tique) avant le d√©but du festival. Bras muscl√©s bienvenus ! Travail en √©quipe dans une bonne ambiance.",
    type: 'scheduled' as const,
    startDate: new Date('2025-11-18T09:00:00'),
    endDate: new Date('2025-11-18T13:00:00'),
    location: 'Entrep√¥t municipal - Zone technique',
    maxVolunteers: 10,
    volunteers: [],
    responsibles: [],
    pendingResponsibles: [],
    status: 'published' as const,
    isUrgent: true,
    isRecurrent: false,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    title: "R√©seaux sociaux - Couverture live du festival",
    description: "Assurer la couverture du festival sur les r√©seaux sociaux : photos, vid√©os, stories Instagram/Facebook, interactions avec la communaut√©. Smartphone et cr√©ativit√© requis !",
    type: 'scheduled' as const,
    startDate: new Date('2025-11-21T10:00:00'),
    endDate: new Date('2025-11-21T18:00:00'),
    location: 'Bureau du festival - Maison des associations',
    maxVolunteers: 2,
    volunteers: [],
    responsibles: [],
    pendingResponsibles: [],
    status: 'published' as const,
    isUrgent: false,
    isRecurrent: false,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    title: "Billetterie et contr√¥le d'acc√®s",
    description: "G√©rer la billetterie, scanner les QR codes, contr√¥ler les acc√®s et renseigner les festivaliers. Rigueur et sens du contact indispensables.",
    type: 'scheduled' as const,
    startDate: new Date('2025-11-20T17:30:00'),
    endDate: new Date('2025-11-20T22:00:00'),
    location: 'Hall d\'entr√©e - Th√©√¢tre des Jacobins',
    maxVolunteers: 4,
    volunteers: [],
    responsibles: [],
    pendingResponsibles: [],
    status: 'published' as const,
    isUrgent: false,
    isRecurrent: false,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
];

async function createTestMissions() {
  console.log('üé¨ Cr√©ation des missions de test...\n');

  try {
    for (const mission of testMissions) {
      // Convertir les dates en Timestamp Firestore
      const missionData = {
        ...mission,
        startDate: Timestamp.fromDate(mission.startDate),
        endDate: Timestamp.fromDate(mission.endDate),
        createdAt: Timestamp.fromDate(mission.createdAt),
        updatedAt: Timestamp.fromDate(mission.updatedAt),
      };

      const docRef = await addDoc(collection(db, 'missions'), missionData);
      
      console.log(`‚úÖ Mission cr√©√©e : ${mission.title}`);
      console.log(`   ID: ${docRef.id}`);
      console.log(`   Date: ${mission.startDate.toLocaleDateString('fr-FR')}`);
      console.log(`   Lieu: ${mission.location}`);
      console.log(`   Places: ${mission.maxVolunteers}`);
      console.log(`   Urgent: ${mission.isUrgent ? 'OUI' : 'Non'}`);
      console.log('');
    }

    console.log('üéâ Toutes les missions de test ont √©t√© cr√©√©es avec succ√®s !');
    console.log(`\nüìä Statistiques :`);
    console.log(`   Total missions : ${testMissions.length}`);
    console.log(`   Missions urgentes : ${testMissions.filter(m => m.isUrgent).length}`);
    console.log(`   Total places : ${testMissions.reduce((sum, m) => sum + m.maxVolunteers, 0)}`);
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des missions :', error);
    process.exit(1);
  }
}

createTestMissions();

