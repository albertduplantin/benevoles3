rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isCategoryResponsible() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['category_responsible', 'admin'];
    }
    
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow delete: if isAdmin();
    }
    
    match /missions/{missionId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() || isCategoryResponsible();
      allow update: if isAdmin() 
                   || isCategoryResponsible()
                   || (isAuthenticated() && isVolunteerRegistration());
      allow delete: if isAdmin() || isCategoryResponsible();
    }
    
    // Fonction pour vérifier si c'est une inscription/désinscription de bénévole
    function isVolunteerRegistration() {
      let oldVolunteers = resource.data.volunteers;
      let newVolunteers = request.resource.data.volunteers;
      let userAdded = request.auth.uid in newVolunteers && !(request.auth.uid in oldVolunteers);
      let userRemoved = !(request.auth.uid in newVolunteers) && request.auth.uid in oldVolunteers;
      let onlyVolunteersChanged = request.resource.data.diff(resource.data).affectedKeys().hasOnly(['volunteers', 'updatedAt', 'status']);
      
      return (userAdded || userRemoved) && onlyVolunteersChanged;
    }
    
    
    match /volunteerRequests/{requestId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
                    && request.auth.uid == request.resource.data.userId
                    && request.resource.data.status == 'pending';
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    match /settings/{document} {
      allow read: if isAuthenticated(); // Lecture pour tous les utilisateurs authentifiés
      allow write: if isAdmin(); // Écriture uniquement pour les admins
    }
    
    match /categoryResponsibles/{assignmentId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    
    match /notificationLogs/{logId} {
      allow read: if isAdmin(); // Seuls les admins peuvent lire les logs
      allow create: if true; // Permettre la création depuis l'API (via Admin SDK si nécessaire)
      allow update, delete: if false; // Les logs ne peuvent pas être modifiés ou supprimés
    }
  }
}